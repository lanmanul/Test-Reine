# frozen_string_literal: true

# Напишите программу которая отображает числа в стиле жидкокристаллического
# дисплея с регулируемым размером.
#     Цифры, которые нужно отобразить, будут переданы в качестве аргумента
# программе. Размер должен контролироваться с помощью опции командной строки
# -v, за которой следует положительное целое число. Значение по умолчанию для -v
# равно 2.



# Заводим хэш, который хранит ключи в виде цифр(строк) и значения в виде
# массива сегментов строкового представления каждого сегмента для цифр от 0 до 9
digits = {
    "0" => [" -- ", "|  |", "|  |", "    ", "|  |", "|  |", " -- "],
    "1" => ["    ", "   |", "   |", "    ", "   |", "   |", "    "],
    "2" => [" -- ", "   |", "   |", " -- ", "|   ", "|   ", " -- "],
    "3" => [" -- ", "   |", "   |", " -- ", "   |", "   |", " -- "],
    "4" => ["    ", "|  |", "|  |", " -- ", "   |", "   |", "    "],
    "5" => [" -- ", "|   ", "|   ", " -- ", "   |", "   |", " -- "],
    "6" => [" -- ", "|   ", "|   ", " -- ", "|  |", "|  |", " -- "],
    "7" => [" -- ", "   |", "   |", "    ", "   |", "   |", "    "],
    "8" => [" -- ", "|  |", "|  |", " -- ", "|  |", "|  |", " -- "],
    "9" => [" -- ", "|  |", "|  |", " -- ", "   |", "   |", " -- "]
}

# Функция для печати чисел в формате семисегментного дисплея
# Функция принимает число в виде строки и хэш с сегментами
# Она создаёт семь строк, каждая из которых содержит часть представления всех цифр числа
def print_digits(number, digits)
  # Инициализируем массив, состоящий из 7 пустых строк,
  # каждая из которых будет содержать одну горизонтальную "линию" вывода цифр
  # В конечном итоге каждая строка будет представлять один из семи "слоев" семисегментного дисплея
  lines = Array.new(7) { "" }

  # Преобразуем число в строку, разбивает строку на массив символов,
  # т.е. каждую цифру превращает в отдельный элемент и итерируем по каждой цифре
  # перебирая с помощью each каждую цифру в строке number
  number.to_s.chars.each do |digit|
    # Извлекаем массив сегментов, представляющих данную цифру
    # Итерируемся по каждому сегменту этой цифры, добавляя его в соответствующую строку массива lines
    digits[digit].each_with_index do |segment, index|
      lines[index] += segment + " "
    end
  end

  # Выводим каждую строку массива lines, которая теперь содержит один слой всех цифр, переданных в number
  lines.each { |line| puts line }
end

# Получаем аргументы из ARGV и проверяем их наличие
arguments = ARGV

if arguments.empty?
  puts "Пожалуйста, введите число в качестве аргумента."
  print "> "
  user_input = STDIN.gets.chomp  # считываем строку, а не число
  print_digits(user_input, digits)
else
  arguments.each do |arg|
    print_digits(arg, digits)
    puts # разделяем вывод для каждого аргумента пустой строкой
  end
end
<<<<<<< HEAD
=======
# Реализовать функцию при которой размер должен контролироваться с помощью опции командной строки -v я не смог
>>>>>>> cd2106f25b58306ca88dc2c38d7fdfd27ef6c9e9
